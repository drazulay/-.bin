#! /usr/bin/env bash

PATH="/bin:/usr/bin:/sbin:/usr/sbin:/usr/local/bin:/usr/local/sbin"
export PATH

[ -z $1 ] && VOLUME="CONFIG" || VOLUME="$1"
shift 1
[ -z $1 ] && VOLUMES_DIR="/Volumes" || VOLUMES_DIR="$1"

set -eo pipefail


# Set initial variables
AWK=$(which awk)
CONFIG_FILE="$HOME/.bin/backup-config.conf"
DATE="$(date +%d-%m-%Y)"
PATH_ON_VOLUME="${VOLUMES_DIR}/${VOLUME}/${DATE}${HOME}/"
RSYNC=$(which rsync)
SUDO=$(which sudo)


# Check if we have the required commands
[ -z "${SUDO}" ] && echo "The command sudo is required to be installed to run backup-config."
[ -z "${RSYNC}" ] && echo "The command rsync is required to be installed to run backup-config."
[ -z "${AWK}" ] && echo "The command awk is required to be installed to run backup-config."


# Check privileges
echo "Super user privileges are required to run this command."
sudo --validate

if [ $? -ne 0 ]; then
	EXIT=$?
	echo "Authentication failure, exiting.."
	exit ${EXIT}
fi

# Check if the volume is mounted
if [ ! -d ${VOLUMES_DIR}/${VOLUME} ]; then
	echo "Volume ${VOLUME} is not mounted. Please mount a volume named ${VOLUME} and try again."
	exit 1
fi


# Execute backup
echo -e "\nStarting backup..\n"
sudo mkdir -pv ${PATH_ON_VOLUME}

while read -r PATH; do

	TARGET_PATH="${PATH/~\//${PATH_ON_VOLUME}}"
	PATH="${PATH/~\//${HOME}/}"

	# Check if the file exists and is not a special file or socket
	if ([ ! -e ${PATH} ] || [ -b ${PATH} ]|| [ -c ${PATH} ] || [ -S ${PATH} ]); then
		continue
	fi

	# Copy directories recursively
	if [ -d ${PATH} ]; then
		DIR=$(echo "${TARGET_PATH}" | ${AWK} 'BEGIN{FS=OFS="/"} {NF--} 1')
		${SUDO} ${RSYNC} -riam --sparse --update --perms --out-format="[%t] %o %f --> ${DIR}/%n (%l bytes)" --prune-empty-dirs ${PATH} ${DIR/}
	fi

	# Copy files
	if [ -f ${PATH} ]; then
		DIR=$(echo "${TARGET_PATH}" | ${AWK} 'BEGIN{FS=OFS="/"} {NF--} 1')
		${SUDO} ${RSYNC} -ria --sparse --update --perms --out-format="[%t] %o %f --> ${DIR}/%n (%l bytes)" ${PATH} ${DIR}/
	fi

	# Copy symlinks
	if [ -h ${PATH} ]; then
		DIR=$(echo "${TARGET_PATH}" | ${AWK} 'BEGIN{FS=OFS="/"} {NF--} 1')
		${SUDO} ${RSYNC} -ria --links --sparse --update --perms --out-format="[%t] %o %f --> ${DIR}/%n (%l bytes)" ${PATH} ${DIR}/
	fi

done <$CONFIG_FILE

echo -e "\nDone.\nEject volume ${VOLUME} if it is an external storage device and keep it safely stored."
