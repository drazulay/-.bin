#! /usr/bin/env bash

PATH="/bin:/usr/bin:/sbin:/usr/sbin:/usr/local/bin:/usr/local/sbin"
export PATH

[ -z $1 ] && VOLUME="CONFIG" || VOLUME="$1"
shift 1
[ -z $1 ] && VOLUMES_DIR="/Volumes" || VOLUMES_DIR="$1"

set -eo pipefail

declare -a FILES=(
	"${HOME}/.bash_profile"
	"${HOME}/.bashrc"
	"${HOME}/.cargo/.crates.toml"
	"${HOME}/.composer/auth.json"
	"${HOME}/.composer/composer.json"
	"${HOME}/.composer/composer.lock"
	"${HOME}/.config"
	"${HOME}/.gitconfig"
	"${HOME}/.gitmodules"
	"${HOME}/.pearrc"
	"${HOME}/.profile"
	"${HOME}/.vimrc"
	"${HOME}/.yarnrc"
	"${HOME}/.z"
	"${HOME}/.zshenv"
	"${HOME}/.zshfn"
	"${HOME}/.zshplugin"
	"${HOME}/.zshrc"
	"${HOME}/.zshrc"
	"${HOME}/.zshrc.local"
	"${HOME}/.zshrc.pre"
)

if [ ! -d ${VOLUMES_DIR}/${VOLUME} ]; then
    echo "Volume ${VOLUME} is not mounted. Please mount a volume named ${VOLUME} and try again."
    exit 1
fi

SUDO=$(which sudo)
RSYNC=$(which rsync)
AWK=$(which awk)

[ -z "${SUDO}" ] && echo "The command sudo is required to be installed to run backup-config."
[ -z "${RSYNC}" ] && echo "The command rsync is required to be installed to run backup-config."
[ -z "${AWK}" ] && echo "The command awk is required to be installed to run backup-config."

DATE="$(date +%d-%m-%Y)"
VOLUME_PATH="${VOLUMES_DIR}/${VOLUME}/${DATE}${HOME}"

echo "Sudo privileges are required to run this command."

sudo --validate

if [ $? -ne 0 ]; then
    EXIT=$?
    echo "Authentication failure, exiting.."
    exit ${EXIT}
fi

echo -e "\nStarting backup..\n"

sudo mkdir -pv ${VOLUME_PATH}

for PATH in "${FILES[@]}"; do
	BACKUP_PATH="${PATH/${HOME}/${VOLUME_PATH}}"

    if ([ ! -e ${PATH} ] || [ -L ${PATH} ] || [ -h ${PATH} ] || [ -S ${PATH} ]); then
		continue
	fi

	if [ -d ${PATH} ]; then
		PRE_DIR=$(echo "${BACKUP_PATH}" | ${AWK} 'BEGIN{FS=OFS="/"} {NF--} 1')
		#[ ! -d ${BACKUP_PATH} ] && ${SUDO} /bin/mkdir -pv ${BACKUP_PATH}
		${SUDO} ${RSYNC} -riam --sparse --update --perms --out-format="%o (%l bytes) | %f --> ${PRE_DIR}/%n" --prune-empty-dirs ${PATH} ${PRE_DIR/}
	fi

	if [ -f ${PATH} ]; then
		PATH_DIR=$(echo "${BACKUP_PATH}" | ${AWK} 'BEGIN{FS=OFS="/"} {NF--} 1')
		#[ ! -d ${PATH_DIR} ] && ${SUDO} /bin/mkdir -pv ${PATH_DIR}
		${SUDO} ${RSYNC} -ria --sparse --update --perms --out-format="%o (%l bytes) | %f --> ${PATH_DIR}/%n/" ${PATH} ${PATH_DIR}/
	fi

done

echo -e "\nDone.\nEject volume ${VOLUME} if it is an external storage device and keep it safely stored."
